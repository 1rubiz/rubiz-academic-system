name: Build & Release

on:
  push:
    tags:
      - 'v*.*.*' # Example: v1.0.3

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      NODE_ENV: production

    steps:
      - name: 🧩 Checkout repository
        uses: actions/checkout@v4

      - name: 🧰 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 📦 Install dependencies
        run: npm ci

      - name: ⚙️ Build renderer
        run: npm run build:renderer

      - name: 🛠️ Install native modules for Electron
        run: npm run postinstall

      # --- Linux Build ---
      - name: 🐧 Build for Linux (.deb, .AppImage)
        if: matrix.os == 'ubuntu-latest'
        continue-on-error: true
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm dpkg-dev fakeroot
          npm run build:linux

      # --- macOS Build ---
      - name: 🍎 Build for macOS (.dmg, .zip)
        if: matrix.os == 'macos-latest'
        continue-on-error: true
        run: npm run build:mac

      # --- Windows Build ---
      - name: 🪟 Build for Windows (.exe, .zip)
        if: matrix.os == 'windows-latest'
        continue-on-error: true
        run: npm run build:win

      # --- Upload Artifacts to Release ---
      - name: 🚀 Upload release assets
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            dist/*.exe
            dist/*.zip
            dist/*.dmg
            dist/*.AppImage
            dist/*.deb
            dist/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
